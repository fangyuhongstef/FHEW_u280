#ifndef DISTRIB_H
#define DISTRIB_H

#include "params.h"

typedef struct {
  double std_dev;
  int max; // Size of table. Set to 0 to ignore table and use rejection sampling
  int offset;
  const float* table; // CDF of Gaussian of standard deviation std_dev centered around offset
} Distrib;

int Sample(const Distrib& Chi); /* sample integer with gaussian distribution */ 

// // Distribution of std dev 1.4
// const float Chi1_Table[23] = {
// 1.12011750313263e-14, 2.38717233762211e-12, 3.04966971020178e-10,
// 2.34394541319773e-8, 1.08538196465647e-6, 0.0000303513786306856,
// 0.000514575939439740, 0.00532464699317562, 0.0340111330223921,
// 0.136723892128727, 0.357520614142345, 0.642479385857655,
// 0.863276107871273, 0.965988866977608, 0.994675353006824,
// 0.999485424060560, 0.999969648621369, 0.999998914618035,
// 0.999999976560546, 0.999999999695033, 0.999999999997613,
// 0.999999999999989, 1.00000000000000};

// const Distrib Chi1 = {
//   1.4,
//   23,
//   11,
//   Chi1_Table
// };

// Distribution of std dev 3.19
const float Chi1_Table[53] = {
4.698858650699718e-16,
6.227977733940903e-15,
7.018480447851978e-14,
7.14083188977298e-13,
6.589921987597541e-12,
5.5190845204775813e-11,
4.1955972309976886e-10,
2.8956138868967437e-09,
1.8146712022297048e-08,
1.0329270214014674e-07,
5.34165814613895e-07,
2.5104832280134785e-06,
1.072696904731564e-05,
4.1689584023948004e-05,
0.00014744710546531897,
0.0004748684633027494,
0.001393676649380399,
0.0037307094938621244,
0.0091187007908093,
0.02037799233071952,
0.041704382630556744,
0.078318262395427,
0.13529482680363697,
0.21566018326101977,
0.3184058705742123,
0.437469862006045,
0.5625301379939549,
0.6815941294257876,
0.7843398167389801,
0.8647051731963629,
0.9216817376045728,
0.9582956173694431,
0.9796220076692803,
0.9908812992091905,
0.9962692905061378,
0.9986063233506195,
0.9995251315366972,
0.9998525528945347,
0.999958310415976,
0.9999892730309526,
0.9999974895167719,
0.9999994658341853,
0.9999998967072978,
0.999999981853288,
0.9999999971043861,
0.9999999995804403,
0.9999999999448091,
0.99999999999341,
0.9999999999992859,
0.9999999999999298,
0.9999999999999938,
0.9999999999999996,
1.0};

const Distrib Chi1 = {
  3.19,
  53,
  26,
  Chi1_Table
};

const float NoTable[1] = {1};

const Distrib Chi2 = {
  (double) (1 << 17),
  0,
  0,
  NoTable

 };

const Distrib Chi3 = {
  (double) 6,
  0,
  0,
  NoTable

 };

const float Binary_Table[3] = {
 .25,
 .75,
1.0 };


const Distrib Chi_Binary = {
  0,
  3,
  1,
  Binary_Table
};




#endif
